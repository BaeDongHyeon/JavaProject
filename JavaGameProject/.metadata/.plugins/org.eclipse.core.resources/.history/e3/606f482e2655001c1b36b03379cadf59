package Screen;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.border.LineBorder;

import DB.DB;
import Utils.MyPanel;
import Utils.MyTextField;

public class Login extends JFrame implements ActionListener, KeyListener {
	private DB db=new DB();	// DB 연결 시도
	private final int BTN_SIZE = 4;
	private final int TXT_SIZE = 2;
	private JButton[] b = new JButton[BTN_SIZE];
	private MyTextField[] t = new MyTextField[TXT_SIZE];
	private String[] btn_name = {"Login", "Sign Up", "Forgot Password", "close"};
	private String[] txt_name = {"ID", "PW"};
	private JPanel login_all, sign_all, forgot_all;
	
	public static void main(String[] args) {
		new Login();
	}
	
	public Login() {
		setSize(500, 500);
		setLocationRelativeTo(null);						// 처음에 화면을 가운데에 나타내기
		setResizable(false);								// 화면 크기 조정 잠금
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		login_all=new MyPanel("login_background", 485, 460); login_all.setLayout(null);
		sign_all = new SignUp();
		forgot_all=new FindPW();
		
		JPanel login_p1=new JPanel(new GridLayout(0, 1, 0, 10)); login_p1.setOpaque(false);
		JPanel login_p2=new JPanel(new GridLayout(0, 1, 0, 10)); login_p2.setOpaque(false);
		login_p1.setBounds(40, 170, 400, 60);
		login_p2.setBounds(40, 250, 400, 180);
		
		for (int i=0; i<TXT_SIZE; i++) {		// 입력란, 설명란
			t[i] = new MyTextField(38, txt_name[i]);
			t[i].setPreferredSize(new Dimension(0, 30));
			login_p1.add(t[i]);		// 로그인 텍스트
		}
		
		for (int i=0; i<BTN_SIZE; i++) {
			b[i] = new JButton(btn_name[i]);
			b[i].addActionListener(this);
			login_p2.add(b[i]);				// 회원가입 버튼
		}

		login_all.add(login_p1); login_all.add(login_p2);
		
		add(forgo_all);
		setVisible(true);
	}
	
//	public void actionPerformed(ActionEvent e) {
//		if (e.getSource() == nick_check) {
//			l_check[0]=db.overlap_check("NickName", t[2].getTextF(), !t[2].getTextF().equals(" "+t[2].getName()));	// 사용 가능 여부 체크
//			l[0].setText(lbl_name[0] + l_check[0]);			// 사용 가능 여부 닉네임
//		}
//		else if (e.getSource() == id_check) {		// id 중복확인
//			l_check[1]=db.overlap_check("ID", t[3].getTextF(), !t[3].getTextF().equals(" "+t[3].getName()));	// 사용 가능 여부 체크
//			l[1].setText(lbl_name[1] + l_check[1]);			// 사용 가능 여부 아이디
//		}
//		else if (e.getSource() == forgot_check) {		// 비밀번호 찾기 시 id 확인
//			f_check[0] = !db.overlap_check("ID", t[7].getTextF(), !t[7].getTextF().equals(" "+t[7].getName()));
//			l[6].setText(lbl_name[6] + f_check[0]);			// 사용 가능한 아이디
//		}
//		else if (e.getSource() == question_check) {		// 비밀번호 찾기 시 질문, 답변 확인
//			try {
//				ResultSet rs = db.search("ID", t[7].getTextF());
//				if (rs == null) {
//					JOptionPane.showMessageDialog(this, "ID 확인을 다시 해주십시오");
//					return;
//				}	// 검색되는 아이디가 없을경우
//				
//				if (question_box2.getSelectedItem().equals(rs.getString("question"))) {			// 확인된 ID의 질문이 선택된 경우
//					if (rs.getString("answer").equals(t[8].getTextF())) 						// 확인된 질문의 답변이 일치하는 경우
//						f_check[1] = true;
//					else 
//						f_check[1] = false;
//					l[8].setText(lbl_name[8] + f_check[1]);
//				}
//			} catch (Exception e1) {
//				e1.printStackTrace();
//			}
//		}
//		else if (e.getSource() == b[0]) {			// 로그인
//			String id = t[0].getTextF();
//			String pw = t[1].getTextF();
//			int login_code = db.login(id, pw);
//			if (login_code == -1) {
//				setLinebd(t[0]);
//			} else if (login_code == 0) {
//				setLinebd(t[1]);
//			} else {
//				this.dispose();
//				new MainMenu("Bouncy Ball", 1280, 720);
//			}
//		} else if (e.getSource() == b[1]) {		// Sign Up
//			pageChange(login_all, sign_all);
//		} else if (e.getSource() == b[2]) {
//			pageChange(login_all, forgot_all);
//		} else if (e.getSource() == b[3]) {		// Close
//			System.exit(0);
//		} else if (e.getSource() == b[4]) {		// Insert
//			for (int i=2; i<7; i++) {
//				if (String.valueOf(t[i].getPassword()).equals(" " + t[i].getName()) ) {
//					JOptionPane.showMessageDialog(this, "빈칸이 있습니다.");
//					setLinebd(t[i]);
//					return;
//				}
//			}
//			for (int i=1; i<7; i++) {
//				if (l_check[i-1] == false) {
//					JOptionPane.showMessageDialog(this, "조건이 일치하지 않는 정보가 있습니다.");
//					setLinebd(t[i]);
//					return;
//				}
//			}
//			
//			db.SignUp(t[3].getTextF(), t[4].getTextF(), t[2].getTextF(), question_box1.getSelectedItem().toString(), t[6].getText());
//			pageChange(sign_all, login_all);
//		} else if (e.getSource() == b[6]) {		// reset
//			for (int i=7; i<TXT_SIZE; i++) {
//				if (String.valueOf(t[i].getPassword()).equals(" " + t[i].getName()) ) {
//					JOptionPane.showMessageDialog(this, "빈칸이 있습니다.");
//					setLinebd(t[i]);
//					return;
//				}
//			}
//			for (int i=0; i<f_check.length; i++) {
//				if (f_check[i] == false) {
//					JOptionPane.showMessageDialog(this, "조건이 일치하지 않는 정보가 있습니다.");
//					setLinebd(t[i+7]);
//					return;
//				}
//			}
//			
//			db.PasswordUpdate(t[7].getTextF(), t[9].getTextF());
//			pageChange(sign_all, login_all);
//		} else if (e.getSource() == b[5]) {		// Go Login
//			pageChange(sign_all, login_all);
//		} else if (e.getSource() == b[7]) {
//			pageChange(forgot_all, login_all);
//		}
//	}
//	
//
//	public void keyTyped(KeyEvent e) {}
//	public void keyPressed(KeyEvent e) {}
//	public void keyReleased(KeyEvent e) {
//		if(e.getSource()==t[4] || e.getSource()==t[9]) {					// 비밀번호 입력란
//			int p;
//			if(e.getSource()==t[4])
//				p=4;
//			else
//				p=9;
//			if(t[p].getPassword().length>4) {		
//				boolean num_check=false;
//				boolean eng_check=false;
//				String compare;
//				for(int i=0;i<10;i++) {
//					if(String.valueOf(t[p].getPassword()).contains(String.valueOf(i)))
//						num_check=true;							
//				}
//				for(int i=65;i<=90;i++) {			// 65~90 = A~Z
//					compare=String.valueOf((char)i);
//					if(String.valueOf(t[p].getPassword()).contains(compare))
//						eng_check=true;
//				}
//				for(int k=97;k<=122;k++) {			// 97~122 = a~z
//					compare=String.valueOf((char)k);
//					if(String.valueOf(t[p].getPassword()).contains(compare))
//						eng_check=true;
//				}
//				if(num_check==true && eng_check==true) {
//					if (p==4) {
//						l_check[2]=true;
//						l[2].setText(lbl_name[2] + l_check[2]);
//					} else {
//						f_check[2]=true;
//						l[9].setText(lbl_name[9] + f_check[2]);
//					}
//				}
//				else {
//					if (p==4) {
//						l_check[2]=false;
//						l[2].setText(lbl_name[2] + l_check[2]);
//					} else {
//						f_check[2]=false;
//						l[9].setText(lbl_name[9] + f_check[2]);
//					}
//				}
//			}
//			else {
//				if (p==4) {
//					l_check[2]=false;
//					l[2].setText(lbl_name[2] + l_check[2]);
//				} else {
//					f_check[2]=false;
//					l[9].setText(lbl_name[9] + f_check[2]);
//				}
//			}
//		}
//		
//		if(e.getSource()==t[5] || e.getSource()==t[10]) {					// 비밀번호 확인란
//			int p;
//			if(e.getSource()==t[5])
//				p=5;
//			else
//				p=10;
//			if(String.valueOf(t[p-1].getPassword()).equals(String.valueOf(t[p].getPassword()))) {
//				if (p==5) {
//					l_check[3]=true;
//					l[3].setText(lbl_name[3] + l_check[3]);
//				}
//				else {
//					f_check[3]=true;
//					l[10].setText(lbl_name[10] + f_check[3]);
//				}
//			}
//			else {
//				if (p==5) {
//					l_check[3]=false;
//					l[3].setText(lbl_name[3] + l_check[3]);
//				}
//				else {
//					f_check[3]=false;
//					l[10].setText(lbl_name[10] + f_check[3]);
//				}
//			}
//		}
//		
//		if(e.getSource()==t[6]) {
//			if(t[6].getPassword().length>0) {
//				l_check[5]=true;
//				l[5].setText(lbl_name[5] + l_check[5]);
//			}
//			else {
//				l_check[5]=false;
//				l[5].setText(lbl_name[5] + l_check[5]);
//			}
//		}
//	}
	
	public void pageChange(JPanel prev, JPanel next) {
		remove(prev);					// 이전 패널 제거
		getContentPane().add(next);		// 다음 패널 붙이기
		revalidate();					// 새로고침
		repaint();						// 새로고침
	}
	
	public void setLinebd(JPasswordField t) {
		t.setBorder(new LineBorder(Color.red, 2));
	}

}