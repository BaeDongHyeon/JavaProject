package Screen;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import Client.Client;
import Maps.MapView;
import Utils.MyButton;
import Utils.MyImage;
import Utils.MyPanel;

public class MainMenu extends JFrame implements ActionListener {
	private JPanel p1;
	private JButton b1, b2;
	private JPanel panel = new JPanel();
	private JButton play, ranking, back, mode, game, cooperation, pvp, attack, defense, game_back;
	private ImageIcon icon = new ImageIcon("ImageFile\\Label\\ranking_Label.png");
	private JLabel[] user = new JLabel[10];
	private JScrollPane scroll = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
	private int nowSelect=0;
	
	public static void main(String[] args) {
		
	}
	
	public MainMenu(String title, int width, int height) {
		setSize(width, height);							// 크기
		setTitle(title);								// 제목
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	// 프로세스 종료
		setLocationRelativeTo(null);					 // 가운데 배치
		setResizable(false); 							// 화면 크기 고정
		
		p1=new MyPanel("main_background", 1280, 720);					// 그리기 패널
		p1.setLayout(null);
		
		play = new MyButton("Button\\play_Button", 300, 100);	play.setLocation(470, 300);
		ranking = new MyButton("Button\\RanKing_Button", 300, 100); ranking.setLocation(70, 300);
		mode = new MyButton("Button\\Mode_Button", 300, 100); mode.setLocation(900, 300);
		game = new MyButton("Button\\map" + nowSelect + "_Button", 450, 400); game.setLocation(400, 200);
		back = new MyButton("Button\\back_Button", 100, 50); back.setLocation(50, 50);
		game_back = new MyButton("Button\\game_back_Button", 30, 30); game_back.setLocation(20, 20);
		cooperation = new MyButton("Button\\cooperation_Button", 500, 500); cooperation.setLocation(100, 160);
		pvp = new MyButton("Button\\PVP_Button", 500, 500); pvp.setLocation(680, 160);
		attack = new MyButton("Button\\Attack_Button", 500, 500); attack.setLocation(100, 160);
		defense = new MyButton("Button\\Defense_Button", 500, 500); defense.setLocation(680, 160);
		
		scroll.getVerticalScrollBar().setUnitIncrement(30); //스크롤 속도
		
		add(play); add(ranking);
		add(back); add(scroll);
		add(mode); add(cooperation); 
		add(pvp); add(attack); 
		add(defense); add(game_back);
		add(p1);
		 
		back.setVisible(false); scroll.setVisible(false); 
		cooperation.setVisible(false); pvp.setVisible(false); 
		attack.setVisible(false); defense.setVisible(false); 
		game_back.setVisible(false);
		
		play.addActionListener(this);
		ranking.addActionListener(this);
		mode.addActionListener(this);
		pvp.addActionListener(this);
		back.addActionListener(this);
		game_back.addActionListener(this);
				
		// 랭킹 스크롤
		scroll.setBounds(140, 160, 1000, 500);
		panel.setLayout(new GridLayout(user.length, 1));
		for(int i=0;i<user.length;i++) {
			user[i] = new JLabel("");
			user[i].setIcon(MyImage.getImage("Label\\ranking_Label", 980, 100));
			panel.add(user[i]);
		}
		setVisible(true);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == play) {
			remove(p1);
			p1=new MyPanel("select_background", 1280, 720);
			p1.setLayout(null);
			p1.add(game); add(p1);								

			p1.setVisible(true); back.setVisible(true); 
			game.setVisible(true); ranking.setVisible(false);
			play.setVisible(false); mode.setVisible(false);
			
			p1.addMouseWheelListener(new MouseWheelListener() {  
				public void mouseWheelMoved(MouseWheelEvent e) {
					int n = e.getWheelRotation();
					p1.remove(game);
					if(n<0) WheelUp(); // Up
					else WheelDown(); // Down
					p1.add(game);
				}
			});
			game.addActionListener(this);
			
		} 
		else if (e.getSource() == ranking) {
			remove(p1);
			p1=new MyPanel("ranking_background", 1280, 720);
			add(p1);	
			
			p1.setVisible(true); scroll.setVisible(true); 
			back.setVisible(true); ranking.setVisible(false); 
			play.setVisible(false); mode.setVisible(false);
		}
		else if(e.getSource() == mode) {
			remove(p1);
			p1=new MyPanel("mode_background", 1280, 720);
			add(p1);
			
			p1.setVisible(true);
			cooperation.setVisible(true); pvp.setVisible(true);
			back.setVisible(true); ranking.setVisible(false);
			play.setVisible(false); mode.setVisible(false); 
		}
		else if(e.getSource() == pvp) {
			remove(p1);
			p1=new MyPanel("mode_background", 1280, 720);
			add(p1);
			
			p1.setVisible(true);
			attack.setVisible(true); defense.setVisible(true);
			back.setVisible(true); ranking.setVisible(false);
			play.setVisible(false); mode.setVisible(false);
			cooperation.setVisible(false); pvp.setVisible(false);
		}
		else if(e.getSource() == back) {
			remove(p1);
			p1=new MyPanel("main_background", 1280, 720);
			add(p1);
			SelectMap(0);
			
			p1.setVisible(true); ranking.setVisible(true);
			play.setVisible(true); mode.setVisible(true);
			back.setVisible(false); game.setVisible(false);
			scroll.setVisible(false); cooperation.setVisible(false);
			pvp.setVisible(false); attack.setVisible(false);
			defense.setVisible(false);
		}
		else if(e.getSource() == game_back) {
			remove(p1);
			p1=new MyPanel("main_background", 1280, 720);
			add(p1);
			SelectMap(0);
			
			p1.setVisible(true); ranking.setVisible(true);
			play.setVisible(true); mode.setVisible(true);
			back.setVisible(false); game.setVisible(false);
			game_back.setVisible(false);
		}

		else if(e.getSource() == game && nowSelect == 0) {
		/*
			remove(p1);
			p1=new MapView();
			add(p1);
			revalidate(); repaint();					
			
			p1.setVisible(true); game_back.setVisible(true);
			game_back.setVisible(true); game.setVisible(false); 
			back.setVisible(false);
		*/
			this.dispose();
			//new MapView(); 서버붙이면서 없앴음
			Client c = new Client();
			MapView mp = new MapView(c);
			String[] arg = {};
			c.main(arg);
		}
	}
	
	public void WheelUp() { // 이전 맵으로 이동하는 메소드
		if(nowSelect==0) nowSelect=7;
		else nowSelect--;
		SelectMap(nowSelect);
	}
	
	public void WheelDown() { // 다음 맵으로 이동하는 메소드 
		if(nowSelect==7) nowSelect=0;
		else nowSelect++;
		SelectMap(nowSelect);
	}
	
	public void SelectMap(int nowSelect) { // 현재 선택된 맵을 나타내는 매소드
		game = new MyButton("Button\\map" + nowSelect + "_Button", 450, 400); game.setLocation(400, 200);		
		game.addActionListener(this);
	}
}
